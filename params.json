{
  "name": "Highlight.js",
  "tagline": "host highlight.js files",
  "body": "# Highlight.js\r\n\r\n[![Build Status](https://travis-ci.org/isagalaev/highlight.js.svg?branch=master)](https://travis-ci.org/isagalaev/highlight.js)\r\n\r\nHighlight.js is a syntax highlighter written in JavaScript. It works in\r\nthe browser as well as on the server. It works with pretty much any\r\nmarkup, doesn’t depend on any framework and has automatic language\r\ndetection.\r\n\r\n## Getting Started\r\n\r\nThe bare minimum for using highlight.js on a web page is linking to the\r\nlibrary along with one of the styles and calling\r\n[`initHighlightingOnLoad`][1]:\r\n\r\n```html\r\n<link rel=\"stylesheet\" href=\"/path/to/styles/default.css\">\r\n<script src=\"/path/to/highlight.pack.js\"></script>\r\n<script>hljs.initHighlightingOnLoad();</script>\r\n```\r\n\r\nThis will find and highlight code inside of `<pre><code>` tags; it tries\r\nto detect the language automatically. If automatic detection doesn’t\r\nwork for you, you can specify the language in the `class` attribute:\r\n\r\n```html\r\n<pre><code class=\"html\">...</code></pre>\r\n```\r\n\r\nThe list of supported language classes is available in the [class\r\nreference][2].  Classes can also be prefixed with either `language-` or\r\n`lang-`.\r\n\r\nTo disable highlighting altogether use the `nohighlight` class:\r\n\r\n```html\r\n<pre><code class=\"nohighlight\">...</code></pre>\r\n```\r\n\r\n## Custom Initialization\r\n\r\nWhen you need a bit more control over the initialization of\r\nhighlight.js, you can use the [`highlightBlock`][3] and [`configure`][4]\r\nfunctions. This allows you to control *what* to highlight and *when*.\r\n\r\nHere’s an equivalent way to calling [`initHighlightingOnLoad`][1] using\r\njQuery:\r\n\r\n```javascript\r\n$(document).ready(function() {\r\n  $('pre code').each(function(i, block) {\r\n    hljs.highlightBlock(block);\r\n  });\r\n});\r\n```\r\n\r\nYou can use any tags instead of `<pre><code>` to mark up your code. If\r\nyou don't use a container that preserve line breaks you will need to\r\nconfigure highlight.js to use the `<br>` tag:\r\n\r\n```javascript\r\nhljs.configure({useBR: true});\r\n\r\n$('div.code').each(function(i, block) {\r\n  hljs.highlightBlock(block);\r\n});\r\n```\r\n\r\nFor other options refer to the documentation for [`configure`][4].\r\n\r\n\r\n## Web Workers\r\n\r\nYou can run highlighting inside a web worker to avoid freezing the browser\r\nwindow while dealing with very big chunks of code.\r\n\r\nIn your main script:\r\n\r\n```javascript\r\naddEventListener('load', function() {\r\n  var code = document.querySelector('#code');\r\n  var worker = new Worker('worker.js');\r\n  worker.onmessage = function(event) { code.innerHTML = event.data; }\r\n  worker.postMessage(code.textContent);\r\n})\r\n```\r\n\r\nIn worker.js:\r\n\r\n```javascript\r\nonmessage = function(event) {\r\n  importScripts('<path>/highlight.pack.js');\r\n  var result = self.hljs.highlightAuto(event.data);\r\n  postMessage(result.value);\r\n}\r\n```\r\n\r\n\r\n## Getting the Library\r\n\r\nYou can get highlight.js as a hosted, or custom-build, browser script or\r\nas a server module. Right out of the box the browser script supports\r\nboth AMD and CommonJS, so if you wish you can use RequireJS or\r\nBrowserify without having to build from source. The server module also\r\nworks perfectly fine with Browserify, but there is the option to use a\r\nbuild specific to browsers rather than something meant for a server.\r\nHead over to the [download page][5] for all the options.\r\n\r\n**Don't link to GitHub directly.** The library is not supposed to work straight\r\nfrom the source, it requires building. If none of the pre-packaged options\r\nwork for you refer to the [building documentation][6].\r\n\r\n**The CDN-hosted package doesn't have all the languages.** Otherwise it'd be\r\ntoo big. If you don't see the language you need in the [\"Common\" section][5],\r\nit can be added manually:\r\n\r\n```html\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js\"></script>\r\n```\r\n\r\n**On Almond.** You need to use the optimizer to give the module a name. For\r\nexample:\r\n\r\n```\r\nr.js -o name=hljs paths.hljs=/path/to/highlight out=highlight.js\r\n```\r\n\r\n\r\n## License\r\n\r\nHighlight.js is released under the BSD License. See [LICENSE][7] file\r\nfor details.\r\n\r\n## Links\r\n\r\nThe official site for the library is at <https://highlightjs.org/>.\r\n\r\nFurther in-depth documentation for the API and other topics is at\r\n<http://highlightjs.readthedocs.io/>.\r\n\r\nAuthors and contributors are listed in the [AUTHORS.en.txt][8] file.\r\n\r\n[1]: http://highlightjs.readthedocs.io/en/latest/api.html#inithighlightingonload\r\n[2]: http://highlightjs.readthedocs.io/en/latest/css-classes-reference.html\r\n[3]: http://highlightjs.readthedocs.io/en/latest/api.html#highlightblock-block\r\n[4]: http://highlightjs.readthedocs.io/en/latest/api.html#configure-options\r\n[5]: https://highlightjs.org/download/\r\n[6]: http://highlightjs.readthedocs.io/en/latest/building-testing.html\r\n[7]: https://github.com/isagalaev/highlight.js/blob/master/LICENSE\r\n[8]: https://github.com/isagalaev/highlight.js/blob/master/AUTHORS.en.txt\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}